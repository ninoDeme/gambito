-- CREATE SCHEMA auth;
--
-- CREATE ROLE authorizer;
-- CREATE ROLE authenticated;
-- CREATE ROLE anon;
--
-- CREATE OR REPLACE FUNCTION auth.uid(UUID default null)
--  RETURNS UUID
--  LANGUAGE sql
-- AS $function$
--     SELECT CASE WHEN $1 IS NULL
--         THEN uuid(current_setting('USER_SESSION.UID', 't'))
--         ELSE uuid(set_config('USER_SESSION.UID', $1::text, false))
--     END
--     ;
-- $function$
-- ;
--
-- CREATE TABLE auth.role (
--     id uuid NOT NULL PRIMARY KEY,
--     name character varying(256),
--     normalized_name character varying(256),
--     concurrency_stamp text
-- );
--
-- CREATE TABLE auth.role_claim (
--     id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
--     role_id uuid NOT NULL REFERENCES auth.role (id) ON DELETE CASCADE,
--     claim_type text,
--     claim_value text
-- );
--
-- CREATE TABLE auth."user" (
--     id uuid PRIMARY KEY NOT NULL ,
--     user_name character varying(256),
--     normalized_user_name character varying(256),
--     email character varying(256),
--     normalized_email character varying(256),
--     email_confirmed boolean NOT NULL,
--     password_hash text,
--     security_stamp text,
--     concurrency_stamp text,
--     phone_number text,
--     phone_number_confirmed boolean NOT NULL,
--     two_factor_enabled boolean NOT NULL,
--     lockout_end timestamp with time zone,
--     lockout_enabled boolean NOT NULL,
--     access_failed_count integer NOT NULL
-- );
--
-- CREATE TABLE auth.user_claim (
--     id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
--     user_id uuid NOT NULL REFERENCES auth."user" (id) ON DELETE CASCADE,
--     claim_type text,
--     claim_value text
-- );
--
-- CREATE TABLE auth.user_login (
--     login_provider character varying(128) NOT NULL,
--     provider_key character varying(128) NOT NULL,
--     provider_display_name text,
--     user_id uuid NOT NULL REFERENCES auth."user" (id) ON DELETE CASCADE
-- );
--
-- CREATE TABLE auth.user_role (
--     user_id uuid NOT NULL REFERENCES auth."user" (id) ON DELETE CASCADE,
--     role_id uuid NOT NULL REFERENCES auth.role (id) ON DELETE CASCADE,
--     PRIMARY KEY (user_id, role_id)
-- );
--
-- CREATE TABLE auth.user_token (
--     user_id uuid NOT NULL REFERENCES auth."user" (id) ON DELETE CASCADE,
--     login_provider character varying(256) NOT NULL,
--     name character varying(256) NOT NULL,
--     value text,
--     PRIMARY KEY (user_id, login_provider, name)
-- );
--
-- CREATE TABLE organizacao (
--   id INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
--   nome VARCHAR(100) NOT NULL
-- );
-- ALTER TABLE organizacao ENABLE ROW LEVEL SECURITY;
--
-- CREATE TABLE user_organizacao (
--     usuario uuid NOT NULL REFERENCES auth."user" (id) ON DELETE CASCADE,
--     organizacao integer NOT NULL REFERENCES organizacao (id) ON DELETE CASCADE,
--     PRIMARY KEY (usuario, organizacao)
-- );
--
-- ALTER TABLE user_organizacao ENABLE ROW LEVEL SECURITY;
--
-- CREATE POLICY "Usuarios conseguem ver suas organizações disponiveis" ON user_organizacao
-- USING ( (SELECT auth.uid()) = usuario );
--
-- CREATE POLICY "Usuarios conseguem ver suas organizações" ON organizacao
-- USING ( id in ( select organizacao from user_organizacao ) );
--
-- CREATE TABLE funcao (
--   id INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
--   organizacao INT NOT NULL REFERENCES organizacao(id),
--   nome VARCHAR(100) NOT NULL,
--   UNIQUE (organizacao, nome)
-- );
-- ALTER TABLE funcao ENABLE ROW LEVEL SECURITY;
--
-- CREATE POLICY "Usuarios conseguem ver funções em suas organizações" ON funcao
-- USING ( organizacao in ( select organizacao from user_organizacao ) );
--
-- CREATE TABLE funcionario (
--   id INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
--   organizacao INT NOT NULL REFERENCES organizacao(id),
--   nome VARCHAR(100) NOT NULL,
--   funcao INT NOT NULL REFERENCES funcao(id),
--   encarregado INT REFERENCES funcionario(id),
--   invativo BOOLEAN NOT NULL DEFAULT FALSE
-- );
-- ALTER TABLE funcionario ENABLE ROW LEVEL SECURITY;
--
-- CREATE POLICY "Usuarios conseguem ver funcionarios em suas organizações" ON funcionario
-- USING ( organizacao in ( select organizacao from user_organizacao ) );
--
-- CREATE TABLE produto (
--   id INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
--   organizacao INT NOT NULL REFERENCES organizacao(id),
--   nome VARCHAR(100) NOT NULL UNIQUE,
--   tempo_peca INT NOT NULL
-- );
-- ALTER TABLE produto ENABLE ROW LEVEL SECURITY;
--
-- CREATE POLICY "Usuarios conseguem ver produtos em suas organizações" ON produto
-- USING ( organizacao in ( select organizacao from user_organizacao ) );
--
-- CREATE TABLE etapa (
--   id INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
--   organizacao INT NOT NULL REFERENCES organizacao(id),
--   nome VARCHAR(100) NOT NULL,
--   UNIQUE (organizacao, nome)
-- );
-- ALTER TABLE etapa ENABLE ROW LEVEL SECURITY;
--
-- CREATE POLICY "Usuarios conseguem ver etapas em suas organizações" ON etapa
-- USING ( organizacao in ( select organizacao from user_organizacao ) );
--
-- CREATE TABLE pedido (
--   id INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
--   produto INT NOT NULL REFERENCES produto(id),
--   qtd_pecas INT NOT NULL
-- );
-- ALTER TABLE pedido ENABLE ROW LEVEL SECURITY;
--
-- CREATE POLICY "Usuarios conseguem ver pedidos em suas organizações" ON pedido
-- USING ( produto in ( select produto from produto ) );
--
-- CREATE TABLE defeito (
--   id INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
--   organizacao INT NOT NULL REFERENCES organizacao(id),
--   nome VARCHAR(50) NOT NULL UNIQUE
-- );
-- ALTER TABLE defeito ENABLE ROW LEVEL SECURITY;
--
-- CREATE POLICY "Usuarios conseguem ver defeitos em suas organizações" ON defeito
-- USING ( organizacao in ( select organizacao from user_organizacao ) );
--
-- CREATE TABLE linha_producao (
--   id INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
--   organizacao INT NOT NULL REFERENCES organizacao(id),
--   descricao TEXT
-- );
-- ALTER TABLE linha_producao ENABLE ROW LEVEL SECURITY;
--
-- CREATE POLICY "Usuarios conseguem ver linhas de produção em suas organizações" ON linha_producao
-- USING ( organizacao in ( select organizacao from user_organizacao ) );
--
-- CREATE TABLE linha_producao_dia (
--   id INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
--   linha_producao INT NOT NULL REFERENCES linha_producao(id),
--   data DATE,
--   nome VARCHAR(200),
--   invativo BOOLEAN NOT NULL DEFAULT FALSE,
--   UNIQUE (linha_producao, data)
-- );
-- ALTER TABLE linha_producao_dia ENABLE ROW LEVEL SECURITY;
--
-- CREATE POLICY "Usuarios conseguem ver linhas de produção em suas organizações" ON linha_producao_dia
-- USING ( linha_producao in ( select id from linha_producao ) );
--
-- CREATE TYPE tipo_hora AS ENUM ('HORA_EXTRA', 'BANCO_HORAS');
--
-- CREATE TABLE linha_producao_hora (
--   id INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
--   linha_producao_dia INT NOT NULL,
--   hora TIME NOT NULL,
--   pedido INT NOT NULL REFERENCES pedido(id),
--   qtd_produzido INT,
--   paralizacao BOOLEAN NOT NULL DEFAULT FALSE,
--   hora_ini TIME,
--   hora_fim TIME,
--   tipo TIPO_HORA,
--   FOREIGN KEY(linha_producao_dia) REFERENCES linha_producao_dia
-- );
-- ALTER TABLE linha_producao_hora ENABLE ROW LEVEL SECURITY;
--
-- CREATE POLICY "Usuarios conseguem ver linhas de produção em suas organizações" ON linha_producao_hora
-- USING ( linha_producao_dia in ( select id from linha_producao_dia ) );
--
-- CREATE TABLE linha_producao_hora_etapa (
--   id INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
--   linha_producao_hora INT NOT NULL,
--   etapa INT references etapa(id),
--   ordem INT NOT NULL,
--   segundos INT NOT NULL,
--   FOREIGN KEY(linha_producao_hora) REFERENCES linha_producao_hora(id),
--   UNIQUE (linha_producao_hora, etapa)
-- );
-- ALTER TABLE linha_producao_hora_etapa ENABLE ROW LEVEL SECURITY;
--
-- CREATE POLICY "Usuarios conseguem ver linhas de produção em suas organizações" ON linha_producao_hora_etapa
-- USING ( linha_producao_hora in ( select id from linha_producao_hora ) );
--
-- CREATE TABLE linha_producao_hora_etapa_funcionario (
--   linha_producao_hora_etapa INT NOT NULL REFERENCES linha_producao_hora_etapa(id),
--   funcionario INT NOT NULL REFERENCES funcionario(id),
--   PRIMARY KEY(linha_producao_hora_etapa, funcionario)
-- );
-- ALTER TABLE linha_producao_hora_etapa_funcionario ENABLE ROW LEVEL SECURITY;
--
-- CREATE POLICY "Usuarios conseguem ver linhas de produção em suas organizações" ON linha_producao_hora_etapa_funcionario
-- USING ( funcionario in ( select id from funcionario ) );
--
-- CREATE TABLE linha_producao_hora_defeito (
--   linha_producao_hora INT NOT NULL REFERENCES linha_producao_hora(id),
--   retrabalhado BOOLEAN NOT NULL,
--   defeito INT NOT NULL REFERENCES defeito(id),
--   qtd_pecas INT NOT NULL,
--   PRIMARY KEY (linha_producao_hora, retrabalhado, defeito)
-- );
-- ALTER TABLE linha_producao_hora_defeito ENABLE ROW LEVEL SECURITY;
--
-- CREATE POLICY "Usuarios conseguem ver linhas de produção em suas organizações" ON linha_producao_hora_defeito
-- USING ( defeito in ( select id from defeito ) );
