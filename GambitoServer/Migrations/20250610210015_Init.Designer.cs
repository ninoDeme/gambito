// <auto-generated />
using System;
using GambitoServer.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GambitoServer.Migrations
{
    [DbContext(typeof(GambitoContext))]
    [Migration("20250610210015_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "tipo_hora", new[] { "banco_horas", "hora_extra" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GambitoServer.Db.Defeito", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nome");

                    b.Property<int>("Organizacao")
                        .HasColumnType("integer")
                        .HasColumnName("organizacao");

                    b.HasKey("Id")
                        .HasName("pk_defeito");

                    b.HasIndex("Organizacao")
                        .HasDatabaseName("ix_defeito_organizacao");

                    b.HasIndex(new[] { "Nome" }, "defeito_nome_key")
                        .IsUnique()
                        .HasDatabaseName("ix_defeito_nome");

                    b.ToTable("defeito", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Risco Profundo",
                            Organizacao = 1
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Amassado Leve",
                            Organizacao = 1
                        },
                        new
                        {
                            Id = 3,
                            Nome = "Falha na Pintura",
                            Organizacao = 1
                        },
                        new
                        {
                            Id = 4,
                            Nome = "Risco Superficial",
                            Organizacao = 2
                        });
                });

            modelBuilder.Entity("GambitoServer.Db.Etapa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nome");

                    b.Property<int>("Organizacao")
                        .HasColumnType("integer")
                        .HasColumnName("organizacao");

                    b.HasKey("Id")
                        .HasName("pk_etapa");

                    b.HasIndex("Organizacao", "Nome")
                        .IsUnique()
                        .HasDatabaseName("ix_etapa_organizacao_nome");

                    b.ToTable("etapa", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Corte",
                            Organizacao = 1
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Montagem",
                            Organizacao = 1
                        },
                        new
                        {
                            Id = 4,
                            Nome = "Controle de Qualidade",
                            Organizacao = 1
                        },
                        new
                        {
                            Id = 5,
                            Nome = "Embalagem",
                            Organizacao = 2
                        });
                });

            modelBuilder.Entity("GambitoServer.Db.Funcao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nome");

                    b.Property<int>("Organizacao")
                        .HasColumnType("integer")
                        .HasColumnName("organizacao");

                    b.HasKey("Id")
                        .HasName("pk_funcao");

                    b.HasIndex("Organizacao", "Nome")
                        .IsUnique()
                        .HasDatabaseName("ix_funcao_organizacao_nome");

                    b.ToTable("funcao", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Supervisor de Produção",
                            Organizacao = 1
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Operador de Máquina",
                            Organizacao = 1
                        },
                        new
                        {
                            Id = 3,
                            Nome = "Gerente de Qualidade",
                            Organizacao = 1
                        },
                        new
                        {
                            Id = 4,
                            Nome = "Auxiliar de Produção",
                            Organizacao = 2
                        });
                });

            modelBuilder.Entity("GambitoServer.Db.Funcionario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int?>("Encarregado")
                        .HasColumnType("integer")
                        .HasColumnName("encarregado");

                    b.Property<int>("Funcao")
                        .HasColumnType("integer")
                        .HasColumnName("funcao");

                    b.Property<bool>("Invativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("invativo");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nome");

                    b.Property<int>("Organizacao")
                        .HasColumnType("integer")
                        .HasColumnName("organizacao");

                    b.HasKey("Id")
                        .HasName("pk_funcionario");

                    b.HasIndex("Encarregado")
                        .HasDatabaseName("ix_funcionario_encarregado");

                    b.HasIndex("Funcao")
                        .HasDatabaseName("ix_funcionario_funcao");

                    b.HasIndex("Organizacao")
                        .HasDatabaseName("ix_funcionario_organizacao");

                    b.ToTable("funcionario", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Funcao = 1,
                            Invativo = false,
                            Nome = "Carlos Silva",
                            Organizacao = 1
                        },
                        new
                        {
                            Id = 2,
                            Encarregado = 1,
                            Funcao = 2,
                            Invativo = false,
                            Nome = "Ana Pereira",
                            Organizacao = 1
                        },
                        new
                        {
                            Id = 3,
                            Encarregado = 1,
                            Funcao = 2,
                            Invativo = true,
                            Nome = "João Costa",
                            Organizacao = 1
                        },
                        new
                        {
                            Id = 4,
                            Funcao = 3,
                            Invativo = false,
                            Nome = "Mariana Lima",
                            Organizacao = 1
                        },
                        new
                        {
                            Id = 5,
                            Funcao = 4,
                            Invativo = false,
                            Nome = "Pedro Alves",
                            Organizacao = 2
                        });
                });

            modelBuilder.Entity("GambitoServer.Db.LinhaProducao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .HasColumnType("text")
                        .HasColumnName("descricao");

                    b.Property<int>("Organizacao")
                        .HasColumnType("integer")
                        .HasColumnName("organizacao");

                    b.HasKey("Id")
                        .HasName("pk_linha_producao");

                    b.HasIndex("Organizacao")
                        .HasDatabaseName("ix_linha_producao_organizacao");

                    b.ToTable("linha_producao", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descricao = "Linha de Montagem A",
                            Organizacao = 1
                        },
                        new
                        {
                            Id = 2,
                            Descricao = "Linha de Pintura B",
                            Organizacao = 1
                        },
                        new
                        {
                            Id = 3,
                            Descricao = "Linha de Testes C",
                            Organizacao = 2
                        });
                });

            modelBuilder.Entity("GambitoServer.Db.LinhaProducaoDia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<LocalDate?>("Data")
                        .HasColumnType("date")
                        .HasColumnName("data");

                    b.Property<bool>("Invativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("invativo");

                    b.Property<int>("LinhaProducao")
                        .HasColumnType("integer")
                        .HasColumnName("linha_producao");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("LinhaProducao"));

                    b.HasKey("Id")
                        .HasName("pk_linha_producao_dia");

                    b.HasIndex("LinhaProducao", "Data")
                        .IsUnique()
                        .HasDatabaseName("ix_linha_producao_dia_linha_producao_data");

                    b.ToTable("linha_producao_dia", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Data = new NodaTime.LocalDate(2025, 5, 24),
                            Invativo = false,
                            LinhaProducao = 1
                        },
                        new
                        {
                            Id = 2,
                            Data = new NodaTime.LocalDate(2025, 5, 25),
                            Invativo = false,
                            LinhaProducao = 1
                        },
                        new
                        {
                            Id = 3,
                            Data = new NodaTime.LocalDate(2025, 5, 25),
                            Invativo = false,
                            LinhaProducao = 2
                        });
                });

            modelBuilder.Entity("GambitoServer.Db.LinhaProducaoHora", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<LocalTime>("Hora")
                        .HasColumnType("time without time zone")
                        .HasColumnName("hora");

                    b.Property<LocalTime?>("HoraFim")
                        .HasColumnType("time without time zone")
                        .HasColumnName("hora_fim");

                    b.Property<LocalTime?>("HoraIni")
                        .HasColumnType("time without time zone")
                        .HasColumnName("hora_ini");

                    b.Property<int>("LinhaProducaoDia")
                        .HasColumnType("integer")
                        .HasColumnName("linha_producao_dia");

                    b.Property<bool>("Paralizacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("paralizacao");

                    b.Property<int>("ProdutoConfig")
                        .HasColumnType("integer")
                        .HasColumnName("produto_config");

                    b.Property<int?>("QtdProduzido")
                        .HasColumnType("integer")
                        .HasColumnName("qtd_produzido");

                    b.HasKey("Id")
                        .HasName("pk_linha_producao_hora");

                    b.HasIndex("LinhaProducaoDia")
                        .HasDatabaseName("ix_linha_producao_hora_linha_producao_dia");

                    b.HasIndex("ProdutoConfig")
                        .HasDatabaseName("ix_linha_producao_hora_produto_config");

                    b.ToTable("linha_producao_hora", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Hora = new NodaTime.LocalTime(8, 0),
                            LinhaProducaoDia = 1,
                            Paralizacao = false,
                            ProdutoConfig = 1,
                            QtdProduzido = 10
                        },
                        new
                        {
                            Id = 2,
                            Hora = new NodaTime.LocalTime(9, 0),
                            LinhaProducaoDia = 1,
                            Paralizacao = false,
                            ProdutoConfig = 1,
                            QtdProduzido = 12
                        },
                        new
                        {
                            Id = 3,
                            Hora = new NodaTime.LocalTime(10, 0),
                            LinhaProducaoDia = 1,
                            Paralizacao = true,
                            ProdutoConfig = 1,
                            QtdProduzido = 0
                        },
                        new
                        {
                            Id = 4,
                            Hora = new NodaTime.LocalTime(8, 0),
                            LinhaProducaoDia = 3,
                            Paralizacao = false,
                            ProdutoConfig = 2,
                            QtdProduzido = 8
                        });
                });

            modelBuilder.Entity("GambitoServer.Db.LinhaProducaoHoraDefeito", b =>
                {
                    b.Property<int>("LinhaProducaoHora")
                        .HasColumnType("integer")
                        .HasColumnName("linha_producao_hora");

                    b.Property<bool>("Retrabalhado")
                        .HasColumnType("boolean")
                        .HasColumnName("retrabalhado");

                    b.Property<int>("Defeito")
                        .HasColumnType("integer")
                        .HasColumnName("defeito");

                    b.Property<int>("QtdPecas")
                        .HasColumnType("integer")
                        .HasColumnName("qtd_pecas");

                    b.HasKey("LinhaProducaoHora", "Retrabalhado", "Defeito")
                        .HasName("pk_linha_producao_hora_defeito");

                    b.HasIndex("Defeito")
                        .HasDatabaseName("ix_linha_producao_hora_defeito_defeito");

                    b.ToTable("linha_producao_hora_defeito", (string)null);

                    b.HasData(
                        new
                        {
                            LinhaProducaoHora = 1,
                            Retrabalhado = false,
                            Defeito = 1,
                            QtdPecas = 2
                        },
                        new
                        {
                            LinhaProducaoHora = 1,
                            Retrabalhado = true,
                            Defeito = 2,
                            QtdPecas = 1
                        },
                        new
                        {
                            LinhaProducaoHora = 2,
                            Retrabalhado = false,
                            Defeito = 3,
                            QtdPecas = 1
                        });
                });

            modelBuilder.Entity("GambitoServer.Db.LinhaProducaoHoraEtapa", b =>
                {
                    b.Property<int>("LinhaProducaoHora")
                        .HasColumnType("integer")
                        .HasColumnName("linha_producao_hora");

                    b.Property<int>("Etapa")
                        .HasColumnType("integer")
                        .HasColumnName("etapa");

                    b.HasKey("LinhaProducaoHora", "Etapa")
                        .HasName("pk_linha_producao_hora_etapa");

                    b.HasIndex("Etapa")
                        .HasDatabaseName("ix_linha_producao_hora_etapa_etapa");

                    b.ToTable("linha_producao_hora_etapa", (string)null);

                    b.HasData(
                        new
                        {
                            LinhaProducaoHora = 1,
                            Etapa = 1
                        },
                        new
                        {
                            LinhaProducaoHora = 1,
                            Etapa = 2
                        },
                        new
                        {
                            LinhaProducaoHora = 2,
                            Etapa = 2
                        },
                        new
                        {
                            LinhaProducaoHora = 2,
                            Etapa = 4
                        });
                });

            modelBuilder.Entity("GambitoServer.Db.Organizacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nome");

                    b.HasKey("Id")
                        .HasName("pk_organizacao");

                    b.ToTable("organizacao", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Org de desenvolvimento"
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Org de testes"
                        });
                });

            modelBuilder.Entity("GambitoServer.Db.Produto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nome");

                    b.Property<int>("Organizacao")
                        .HasColumnType("integer")
                        .HasColumnName("organizacao");

                    b.Property<int>("TempoPeca")
                        .HasColumnType("integer")
                        .HasColumnName("tempo_peca");

                    b.HasKey("Id")
                        .HasName("pk_produto");

                    b.HasIndex("Nome")
                        .IsUnique()
                        .HasDatabaseName("ix_produto_nome");

                    b.HasIndex("Organizacao")
                        .HasDatabaseName("ix_produto_organizacao");

                    b.ToTable("produto", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Produto Alfa",
                            Organizacao = 1,
                            TempoPeca = 120
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Produto Beta",
                            Organizacao = 1,
                            TempoPeca = 180
                        },
                        new
                        {
                            Id = 3,
                            Nome = "Produto Gama",
                            Organizacao = 2,
                            TempoPeca = 90
                        });
                });

            modelBuilder.Entity("GambitoServer.Db.ProdutoConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("Produto")
                        .HasColumnType("integer")
                        .HasColumnName("produto");

                    b.HasKey("Id")
                        .HasName("pk_produto_config");

                    b.HasIndex("Produto")
                        .HasDatabaseName("ix_produto_config_produto");

                    b.ToTable("produto_config", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Produto = 1
                        },
                        new
                        {
                            Id = 2,
                            Produto = 2
                        },
                        new
                        {
                            Id = 3,
                            Produto = 3
                        });
                });

            modelBuilder.Entity("GambitoServer.Db.ProdutoConfigEtapa", b =>
                {
                    b.Property<int>("ProdutoConfig")
                        .HasColumnType("integer")
                        .HasColumnName("produto_config");

                    b.Property<int>("Etapa")
                        .HasColumnType("integer")
                        .HasColumnName("etapa");

                    b.Property<int>("Ordem")
                        .HasColumnType("integer")
                        .HasColumnName("ordem");

                    b.Property<int>("Segundos")
                        .HasColumnType("integer")
                        .HasColumnName("segundos");

                    b.HasKey("ProdutoConfig", "Etapa")
                        .HasName("pk_produto_config_etapa");

                    b.HasIndex("Etapa")
                        .HasDatabaseName("ix_produto_config_etapa_etapa");

                    b.ToTable("produto_config_etapa", (string)null);

                    b.HasData(
                        new
                        {
                            ProdutoConfig = 1,
                            Etapa = 2,
                            Ordem = 2,
                            Segundos = 60
                        },
                        new
                        {
                            ProdutoConfig = 1,
                            Etapa = 4,
                            Ordem = 3,
                            Segundos = 30
                        },
                        new
                        {
                            ProdutoConfig = 2,
                            Etapa = 1,
                            Ordem = 1,
                            Segundos = 40
                        },
                        new
                        {
                            ProdutoConfig = 2,
                            Etapa = 2,
                            Ordem = 2,
                            Segundos = 70
                        },
                        new
                        {
                            ProdutoConfig = 2,
                            Etapa = 4,
                            Ordem = 4,
                            Segundos = 30
                        });
                });

            modelBuilder.Entity("GambitoServer.Db.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("ix_user_normalized_email");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("ix_user_normalized_user_name");

                    b.ToTable("user", "auth");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a0e2e2e7-2b7f-4d41-9c2a-6b7a1e18b9d1"),
                            AccessFailedCount = 0,
                            Email = "admin@fabrica.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@FABRICA.COM",
                            NormalizedUserName = "ADMIN@FABRICA.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFUG/PMFzzxt549qLdgva0XLTbAIfMYCFXLSDDvZ/BIygz06h3ngihtvKAa/ryEvWg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "admin@fabrica.com"
                        },
                        new
                        {
                            Id = new Guid("b1f3f3f8-3c8e-5e52-ad3b-7c8b2f29c0e2"),
                            AccessFailedCount = 0,
                            Email = "operator@fabrica.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OPERATOR@FABRICA.COM",
                            NormalizedUserName = "OPERATOR@FABRICA.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIv3lOaj9hoHyu14WS9meY5CZoFq+ZKnMgJKM9zV/28dXFOLgo+EP+ZSuQym1FRBLg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "operator@fabrica.com"
                        });
                });

            modelBuilder.Entity("LinhaProducaoHoraEtapaFuncionario", b =>
                {
                    b.Property<int>("LinhaProducaoHora")
                        .HasColumnType("integer")
                        .HasColumnName("linha_producao_hora");

                    b.Property<int>("Etapa")
                        .HasColumnType("integer")
                        .HasColumnName("etapa");

                    b.Property<int>("Funcionario")
                        .HasColumnType("integer")
                        .HasColumnName("funcionario");

                    b.HasKey("LinhaProducaoHora", "Etapa", "Funcionario")
                        .HasName("pk_linha_producao_hora_etapa_funcionario");

                    b.HasIndex("Funcionario")
                        .HasDatabaseName("ix_linha_producao_hora_etapa_funcionario_funcionario");

                    b.ToTable("linha_producao_hora_etapa_funcionario", (string)null);

                    b.HasData(
                        new
                        {
                            LinhaProducaoHora = 1,
                            Etapa = 1,
                            Funcionario = 2
                        },
                        new
                        {
                            LinhaProducaoHora = 1,
                            Etapa = 2,
                            Funcionario = 3
                        },
                        new
                        {
                            LinhaProducaoHora = 1,
                            Etapa = 2,
                            Funcionario = 2
                        },
                        new
                        {
                            LinhaProducaoHora = 2,
                            Etapa = 2,
                            Funcionario = 2
                        },
                        new
                        {
                            LinhaProducaoHora = 2,
                            Etapa = 4,
                            Funcionario = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_role");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("ix_role_normalized_name");

                    b.ToTable("role", "auth");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c2a4a4a9-4d9d-6f63-be4c-8d9c3a30d1f3"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("d3b5b5ba-5eae-7a74-cf5d-9ead4b41e2a4"),
                            Name = "Operator",
                            NormalizedName = "OPERATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_role_claim");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_role_claim_role_id");

                    b.ToTable("role_claim", "auth");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_claim");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_claim_user_id");

                    b.ToTable("user_claim", "auth");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_user_login");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_login_user_id");

                    b.ToTable("user_login", "auth");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_user_role");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_role_role_id");

                    b.ToTable("user_role", "auth");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("a0e2e2e7-2b7f-4d41-9c2a-6b7a1e18b9d1"),
                            RoleId = new Guid("c2a4a4a9-4d9d-6f63-be4c-8d9c3a30d1f3")
                        },
                        new
                        {
                            UserId = new Guid("b1f3f3f8-3c8e-5e52-ad3b-7c8b2f29c0e2"),
                            RoleId = new Guid("d3b5b5ba-5eae-7a74-cf5d-9ead4b41e2a4")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_user_token");

                    b.ToTable("user_token", "auth");
                });

            modelBuilder.Entity("UserOrganizacao", b =>
                {
                    b.Property<Guid>("Usuario")
                        .HasColumnType("uuid")
                        .HasColumnName("usuario");

                    b.Property<int>("Organizacao")
                        .HasColumnType("integer")
                        .HasColumnName("organizacao");

                    b.HasKey("Usuario", "Organizacao")
                        .HasName("pk_user_organizacao");

                    b.HasIndex("Organizacao")
                        .HasDatabaseName("ix_user_organizacao_organizacao");

                    b.ToTable("user_organizacao", (string)null);

                    b.HasData(
                        new
                        {
                            Usuario = new Guid("a0e2e2e7-2b7f-4d41-9c2a-6b7a1e18b9d1"),
                            Organizacao = 1
                        },
                        new
                        {
                            Usuario = new Guid("a0e2e2e7-2b7f-4d41-9c2a-6b7a1e18b9d1"),
                            Organizacao = 2
                        },
                        new
                        {
                            Usuario = new Guid("b1f3f3f8-3c8e-5e52-ad3b-7c8b2f29c0e2"),
                            Organizacao = 1
                        });
                });

            modelBuilder.Entity("GambitoServer.Db.Defeito", b =>
                {
                    b.HasOne("GambitoServer.Db.Organizacao", "OrganizacaoNavigation")
                        .WithMany("Defeitos")
                        .HasForeignKey("Organizacao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_defeito_organizacaos_organizacao");

                    b.Navigation("OrganizacaoNavigation");
                });

            modelBuilder.Entity("GambitoServer.Db.Etapa", b =>
                {
                    b.HasOne("GambitoServer.Db.Organizacao", "OrganizacaoNavigation")
                        .WithMany("Etapas")
                        .HasForeignKey("Organizacao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_etapa_organizacaos_organizacao");

                    b.Navigation("OrganizacaoNavigation");
                });

            modelBuilder.Entity("GambitoServer.Db.Funcao", b =>
                {
                    b.HasOne("GambitoServer.Db.Organizacao", "OrganizacaoNavigation")
                        .WithMany("Funcaos")
                        .HasForeignKey("Organizacao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_funcao_organizacaos_organizacao");

                    b.Navigation("OrganizacaoNavigation");
                });

            modelBuilder.Entity("GambitoServer.Db.Funcionario", b =>
                {
                    b.HasOne("GambitoServer.Db.Funcionario", "EncarregadoNavigation")
                        .WithMany("InverseEncarregadoNavigation")
                        .HasForeignKey("Encarregado")
                        .HasConstraintName("fk_funcionario_funcionario_encarregado");

                    b.HasOne("GambitoServer.Db.Funcao", "FuncaoNavigation")
                        .WithMany("Funcionarios")
                        .HasForeignKey("Funcao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_funcionario_funcao_funcao");

                    b.HasOne("GambitoServer.Db.Organizacao", "OrganizacaoNavigation")
                        .WithMany("Funcionarios")
                        .HasForeignKey("Organizacao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_funcionario_organizacaos_organizacao");

                    b.Navigation("EncarregadoNavigation");

                    b.Navigation("FuncaoNavigation");

                    b.Navigation("OrganizacaoNavigation");
                });

            modelBuilder.Entity("GambitoServer.Db.LinhaProducao", b =>
                {
                    b.HasOne("GambitoServer.Db.Organizacao", "OrganizacaoNavigation")
                        .WithMany("LinhaProducaos")
                        .HasForeignKey("Organizacao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_linha_producao_organizacaos_organizacao");

                    b.Navigation("OrganizacaoNavigation");
                });

            modelBuilder.Entity("GambitoServer.Db.LinhaProducaoDia", b =>
                {
                    b.HasOne("GambitoServer.Db.LinhaProducao", "LinhaProducaoNavigation")
                        .WithMany("LinhaProducaoDia")
                        .HasForeignKey("LinhaProducao")
                        .IsRequired()
                        .HasConstraintName("fk_linha_producao_dia_linha_producao_linha_producao");

                    b.Navigation("LinhaProducaoNavigation");
                });

            modelBuilder.Entity("GambitoServer.Db.LinhaProducaoHora", b =>
                {
                    b.HasOne("GambitoServer.Db.LinhaProducaoDia", "LinhaProducaoDiaNavigation")
                        .WithMany("LinhaProducaoHoras")
                        .HasForeignKey("LinhaProducaoDia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_linha_producao_hora_linha_producao_dia_linha_producao_dia");

                    b.HasOne("GambitoServer.Db.ProdutoConfig", "ProdutoConfigNavigation")
                        .WithMany("LinhaProducaoHoras")
                        .HasForeignKey("ProdutoConfig")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_linha_producao_hora_produto_config_produto_config");

                    b.Navigation("LinhaProducaoDiaNavigation");

                    b.Navigation("ProdutoConfigNavigation");
                });

            modelBuilder.Entity("GambitoServer.Db.LinhaProducaoHoraDefeito", b =>
                {
                    b.HasOne("GambitoServer.Db.Defeito", "DefeitoNavigation")
                        .WithMany("LinhaProducaoHoraDefeitos")
                        .HasForeignKey("Defeito")
                        .IsRequired()
                        .HasConstraintName("fk_linha_producao_hora_defeito_defeito_defeito");

                    b.HasOne("GambitoServer.Db.LinhaProducaoHora", "LinhaProducaoHoraNavigation")
                        .WithMany("LinhaProducaoHoraDefeitos")
                        .HasForeignKey("LinhaProducaoHora")
                        .IsRequired()
                        .HasConstraintName("fk_linha_producao_hora_defeito_linha_producao_hora_linha_produ");

                    b.Navigation("DefeitoNavigation");

                    b.Navigation("LinhaProducaoHoraNavigation");
                });

            modelBuilder.Entity("GambitoServer.Db.LinhaProducaoHoraEtapa", b =>
                {
                    b.HasOne("GambitoServer.Db.Etapa", "EtapaNavigation")
                        .WithMany("LinhaProducaoHoraEtapas")
                        .HasForeignKey("Etapa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_linha_producao_hora_etapa_etapa_etapa");

                    b.HasOne("GambitoServer.Db.LinhaProducaoHora", "LinhaProducaoHoraNavigation")
                        .WithMany("LinhaProducaoHoraEtapas")
                        .HasForeignKey("LinhaProducaoHora")
                        .IsRequired()
                        .HasConstraintName("fk_linha_producao_hora_etapa_linha_producao_hora_linha_produca");

                    b.Navigation("EtapaNavigation");

                    b.Navigation("LinhaProducaoHoraNavigation");
                });

            modelBuilder.Entity("GambitoServer.Db.Produto", b =>
                {
                    b.HasOne("GambitoServer.Db.Organizacao", "OrganizacaoNavigation")
                        .WithMany("Produtos")
                        .HasForeignKey("Organizacao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_produto_organizacao_organizacao");

                    b.Navigation("OrganizacaoNavigation");
                });

            modelBuilder.Entity("GambitoServer.Db.ProdutoConfig", b =>
                {
                    b.HasOne("GambitoServer.Db.Produto", "ProdutoNavigation")
                        .WithMany("Pedidos")
                        .HasForeignKey("Produto")
                        .IsRequired()
                        .HasConstraintName("fk_produto_config_produtos_produto");

                    b.Navigation("ProdutoNavigation");
                });

            modelBuilder.Entity("GambitoServer.Db.ProdutoConfigEtapa", b =>
                {
                    b.HasOne("GambitoServer.Db.Etapa", "EtapaNavigation")
                        .WithMany("ProdutoConfigEtapas")
                        .HasForeignKey("Etapa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_produto_config_etapa_etapa_etapa");

                    b.HasOne("GambitoServer.Db.ProdutoConfig", "ProdutoConfigNavigation")
                        .WithMany("ProdutoConfigEtapas")
                        .HasForeignKey("ProdutoConfig")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_produto_config_etapa_produto_config_produto_config");

                    b.Navigation("EtapaNavigation");

                    b.Navigation("ProdutoConfigNavigation");
                });

            modelBuilder.Entity("LinhaProducaoHoraEtapaFuncionario", b =>
                {
                    b.HasOne("GambitoServer.Db.Funcionario", null)
                        .WithMany()
                        .HasForeignKey("Funcionario")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_linha_producao_hora_etapa_funcionario_funcionario_funcionar");

                    b.HasOne("GambitoServer.Db.LinhaProducaoHoraEtapa", null)
                        .WithMany()
                        .HasForeignKey("LinhaProducaoHora", "Etapa")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_linha_producao_hora_etapa_funcionario_linha_producao_hora_e");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_claim_role_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("GambitoServer.Db.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_claim_user_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("GambitoServer.Db.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_login_user_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_role_role_id");

                    b.HasOne("GambitoServer.Db.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_user_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("GambitoServer.Db.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_token_user_user_id");
                });

            modelBuilder.Entity("UserOrganizacao", b =>
                {
                    b.HasOne("GambitoServer.Db.Organizacao", null)
                        .WithMany()
                        .HasForeignKey("Organizacao")
                        .IsRequired()
                        .HasConstraintName("fk_user_organizacao_organizacao_organizacao");

                    b.HasOne("GambitoServer.Db.User", null)
                        .WithMany()
                        .HasForeignKey("Usuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_organizacao_user_usuario");
                });

            modelBuilder.Entity("GambitoServer.Db.Defeito", b =>
                {
                    b.Navigation("LinhaProducaoHoraDefeitos");
                });

            modelBuilder.Entity("GambitoServer.Db.Etapa", b =>
                {
                    b.Navigation("LinhaProducaoHoraEtapas");

                    b.Navigation("ProdutoConfigEtapas");
                });

            modelBuilder.Entity("GambitoServer.Db.Funcao", b =>
                {
                    b.Navigation("Funcionarios");
                });

            modelBuilder.Entity("GambitoServer.Db.Funcionario", b =>
                {
                    b.Navigation("InverseEncarregadoNavigation");
                });

            modelBuilder.Entity("GambitoServer.Db.LinhaProducao", b =>
                {
                    b.Navigation("LinhaProducaoDia");
                });

            modelBuilder.Entity("GambitoServer.Db.LinhaProducaoDia", b =>
                {
                    b.Navigation("LinhaProducaoHoras");
                });

            modelBuilder.Entity("GambitoServer.Db.LinhaProducaoHora", b =>
                {
                    b.Navigation("LinhaProducaoHoraDefeitos");

                    b.Navigation("LinhaProducaoHoraEtapas");
                });

            modelBuilder.Entity("GambitoServer.Db.Organizacao", b =>
                {
                    b.Navigation("Defeitos");

                    b.Navigation("Etapas");

                    b.Navigation("Funcaos");

                    b.Navigation("Funcionarios");

                    b.Navigation("LinhaProducaos");

                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("GambitoServer.Db.Produto", b =>
                {
                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("GambitoServer.Db.ProdutoConfig", b =>
                {
                    b.Navigation("LinhaProducaoHoras");

                    b.Navigation("ProdutoConfigEtapas");
                });
#pragma warning restore 612, 618
        }
    }
}
